@page "/aula/nueva"
@page "/aula/editar/{Id:int}"
@rendermode InteractiveServer
@inject NavigationManager _navigationManager
@inject IRepositorioAulas _repositorioaulas

<PageTitle>@_mensaje Aula</PageTitle>
<h3>@_mensaje Aula</h3>

<EditForm Model="_aula" FormName="frmAula" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />
	<div class="mb-3 row">
		<label for="txtNombre" class="col-sm-2 col-form-label">Nombre</label>
		<div class="col-sm-10">
			<InputText @bind-Value="_aula.Nombre" class="form-control" id="txtNombre" />
			<ValidationMessage For="()=>_aula.Nombre" />
		</div>
	</div>
	<div class="mb-3 row">
		<label for="txtCapacidad" class="col-sm-2 col-form-label">Capacidad</label>
		<div class="col-sm-10">
			<InputNumber @bind-Value="_aula.Capacidad" class="form-control" id="txtCapacidad" />
			<ValidationMessage For="()=>_aula.Capacidad" />
		</div>
	</div>
	<button type="submit" class="btn btn-primary">Guardar</button>
	<button class="btn btn-danger ms-3" @onclick="Cancelar" @onclick:preventDefault>Cancelar</button>
</EditForm>

@code {
	[Parameter]
	public int Id { get; set; }
	private Aula? _aula = new();
	private string _mensaje = "Nueva";
	private List<Aula> _aulas = new();

	protected override async Task OnInitializedAsync()
	{
		if (Id > 0)
		{
			_mensaje = "Editar ";
			_aula = await _repositorioaulas.Get(Id);
		}
	}

	private void Cancelar()
	{
		_navigationManager.NavigateTo("/aulas");
	}

	private async Task Guardar()
	{
		if (Id > 0)
		{
			await _repositorioaulas.Update(Id, _aula!);
		}
		else
		{
			await _repositorioaulas.Add(_aula!);
		}
		Cancelar();
	}
}



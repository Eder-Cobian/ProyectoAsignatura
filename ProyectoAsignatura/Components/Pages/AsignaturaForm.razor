@page "/asignatura/nueva"
@page "/asignatura/editar/{Id:int}"
@rendermode InteractiveServer
@inject NavigationManager _navigationManager
@inject IRepositorioAsignaturas _repositorioasignaturas

<PageTitle>@_mensaje Asignatura</PageTitle>
<h3>@_mensaje Asignatura</h3>

<EditForm Model="_asignatura" FormName="frmAsignatura" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />
	<div class="mb-3 row">
		<label for="txtNombre" class="col-sm-2 col-form-label">Nombre</label>
		<div class="col-sm-10">
			<InputText @bind-Value="_asignatura.Nombre" class="form-control" id="txtNombre" />
			<ValidationMessage For="()=>_asignatura.Nombre" />
		</div>
	</div>
	<div class="row mb-3">
		<label for="txtProfesor" class="col-2 col-form-label">Profesor</label>
		<div class="col-10">
			<InputSelect class="form-select" @bind-Value="_asignatura.ProfesorId">
				<option value="0" enabled="enabled">Seleccione Profesor</option>
				@foreach(Profesor profesor in _profesores)
				{
					<option value="@profesor.Id">@profesor.Nombre</option>
				}
			</InputSelect>
			<ValidationMessage For="()=>_asignatura.ProfesorId" />
		</div>
	</div>
	<div class="mb-3 row">
		<label for="txtAula" class="col-sm-2 col-form-label">Aula</label>
		<div class="col-sm-10">
			<InputSelect class="form-select" @bind-Value="_asignatura.AulaId">
				<option value="0" enabled="enabled">Seleccione Aula</option>
				@foreach(Aula aula in _aulas)
				{
					<option value="@aula.Id">@aula.Nombre</option>
				}
			</InputSelect>
			<ValidationMessage For="()=>_asignatura.AulaId" />
		</div>
	</div>
	<div class="mb-3 row">
		<label for="txtHorario" class="col-sm-2 col-form-label">Horario</label>
		<div class="col-sm-10">
			<InputText @bind-Value="_asignatura.Horario" class="form-control" id="txtHorario" />
			<ValidationMessage For="()=>_asignatura.Horario" />
		</div>
	</div>
	<button type="submit" class="btn btn-primary">Guardar</button>
	<button class="btn btn-danger ms-3" @onclick="Cancelar" @onclick:preventDefault>Cancelar</button>
</EditForm>

@code {
	[Parameter]
	public int Id { get; set; }
	private Asignatura? _asignatura = new();
	private string _mensaje = "Nueva";
	private List<Aula> _aulas = new();
	private List<Profesor> _profesores = new();

	protected override async Task OnInitializedAsync()
	{
		_aulas = await _repositorioasignaturas.GetAulas();
		_profesores = await _repositorioasignaturas.GetProfesores();
		if (Id > 0)
		{
			_mensaje = "Editar ";
			_asignatura = await _repositorioasignaturas.Get(Id);
		}
	}

	/*
	protected override void OnInitialized()
	{
		if (Id > 0)
		{
			_mensaje = "Editar ";
			_asignatura = new Asignatura { Id = 1, Nombre = "Matemáticas", Horario = "Lunes 8:00 - 10:00" };
		}
	}
	*/

	private void Cancelar()
	{
		_navigationManager.NavigateTo("/asignaturas");
	}

	private async Task Guardar()
	{
		if(Id > 0)
		{
			await _repositorioasignaturas.Update(Id, _asignatura!);
		}
		else
		{
			await _repositorioasignaturas.Add(_asignatura!);
		}
		Cancelar();
	}
	
	/*
	private void Guardar()
	{
		if (Id > 0)
		{
			// Actualizar asignatura
			_navigationManager.NavigateTo("/asignaturas");
		}
		else
		{
			// Crear nueva asignatura
			_navigationManager.NavigateTo("/asignaturas");
		}
	}
	*/
}

